plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.saguro'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2024.0.0")
}

dependencies {
    // Dependencias de Spring Boot y Spring Cloud
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-vault-config'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.cloud:spring-cloud-config-server'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
    implementation 'org.springframework.boot:spring-boot-starter-security'
	// Dependencias de MapStruct
    implementation 'org.mapstruct:mapstruct:1.6.3'

    // Dependencia de PostgreSQL
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    // Dependencias de Lombok
    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'
	annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    // Dependencias de Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Dependencias de JJWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Swagger/OpenAPI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    // BCrypt para codificación de contraseñas
    implementation 'org.springframework.security:spring-security-crypto'

    // Eliminar esta línea si no usas Thymeleaf
    // implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'ch.qos.logback:logback-classic:1.5.18'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorPath = configurations.annotationProcessor
    dependsOn configurations.annotationProcessor
}

tasks.named('test') {
    useJUnitPlatform()
}

bootBuildImage {
    imageName = System.getenv('IMAGE_NAME') ?: "rapid-config-server:${project.version}"
    if (System.getenv('REGISTRY_URL')) {
        publish = true
        docker {
            publishRegistry {
                url = System.getenv('REGISTRY_URL')
                username = System.getenv('REGISTRY_USERNAME')
                password = System.getenv('REGISTRY_PASSWORD')
            }
        }
    }
}

